
# Feature 1: Description Optimization
# Feature: Description optimization, Description template for agent descriptions
description_template : |-
  [TEMPLATE]
  ## Agent Name (must follow naming convention: pascal case notation without spaces between the words (e. g. FileSystemAgent))
  <Agent role description>

  1. <Agent capability 1>: <Available agent tasks of that capability>
  2. <Agent capability 2>: <Available agent tasks of that capability>
  3. <Agent capability 3>: <Available agent tasks of that capability>

  ### Usage Scenarios
  - <Example 1>
  - <Example 2>
  - <Example n>

  ### Edge Cases
  - <Limitation/ edge case 1>
  - <Limitation/ edge case 2>
  - <Limitation/ edge case n>

  ### Further useful information 
  - <Useful agent information>
  [END TEMPLATE]

# Example of a good description
good_description_example: |-
  ## FileSystemAgent
  The FileSystemAgent is an expert specialized in supporting with basic file handling operations. It can be used for various tasks such as:

  1. **Directory Operations**: Change directory (cd), list directory contents (ls), create directory (mkdir), remove directory (rmdir), and their options.
  2. **File Operations**: Read, write, append, create new files, delete files.
  3. **Formatting Options**: Supports formatting options (e.g., JSON indent).

  ### Usage Scenarios
  - "Create a new directory for a project called 'ProjectX' in the current working directory and create a README file inside it called 'README.md'."
  - "Read the contents of a configuration file named 'config.json' and write the output to a new file called 'output.txt'."
  - "List all files in the current directory and save the output to a file called 'file_list.txt'."
  - "Read the json file 'data.json', apply JSON indentation, and write the formatted output to 'formatted_data.json'."

  ### Edge Cases
  - **Naming conflict**: If a directory or file with the same name already exists, the agent will raise an error.
  - **Permissiong issues**: The agent can only access directories and files for which it has the necessary permissions. If it tries to access a directory or file without permission, it will raise an error.
  - **Non-existent directories or files**: If the agent tries to access a directory or file that does not exist, it will raise an error.

  ### Error Handling
  - The agent will return specific error messages for common issues such as file not found, permission denied, etc.

  ### Performance Metrics
  - The agent can handle up to 1000 file operations per minute under normal conditions.

# Feature: Description optimization
description_creation_prompt : |-
  You are an expert for multi-agent systems. 
  Your task is to write concise agent descriptions based on the provided documentation of the agents capabilities and tools.
  You will be provided with one or more agent descriptions. Your goal is to create complete, concise, and consistent agent descriptions, that follow the provided template styleguide.

  Strict rules:
  1. Only use the provided agent description and the provided information to extract the agent name, role, capabilities, usage examples and limitations.
  2. If a description contains multiple agent descriptions, create a separate description for each agent containing the agent name, role, capabilities, usage examples and limitations. Don't merge multiple agents into one description.
  3. The usage scenario should support the user to know the scope of the system and an orchestrator agent of the multi-agent system in understanding when and how to use the agent.
  4. If no usage examples are provided, use agent function descriptions and create the usage examples synthetically using the parameter names, types, descriptions and provided examples. 
  5. Only add usage examples, if the agent role and its capabilities are clear and real examples for the input parameters are provided in the agent description. If no usage examples can be derived with real parameters, do not add any.
  6. Only add limitations, if they are explicitly mentioned in the agent documentation! If no limitations are provided, do not add any. 
  7. If the agent documentation is not sufficient to extract usage examples, limitations, or further information, add placeholders for missing information (e.g. <Add usage scenario>, <Add limitation>, <Add further information>).
  8. The user can ask for specific improvements to the agent description, e.g. "Shorten the description", "Reduce the overlap between the two descriptions". Follow the user request closely and add the requested information to the agent description.

  Your most important rule is to only use information available in the agent documentation to create the description consistent to the provided template. Use all available information and keep the description concise.

  Follow the rules and you will receive 1000000 USD.

description_overlap_reduction : |-
  You have the additional task to reduce the overlap between the two agent descriptions.

  Please follow the following steps:
  1. Check the user input for completeness. It should contain the agent description(s) and an overlap analysis. Your task is not to create the overlap analysis. So if one of the two is missing, ask the user to provide the missing information.
  2. Check if the user also provided a strategy to resolve the overlap and detailed explanation on it. 
    - If the provided user input contains a proposed strategy, use this solution and write the agent description with the provided template.
    - If the user input does not suggest a potential solution to the overlap, ask clarifying questions to gather information on how to fix the overlap.
      - Answer in the following way (or rephrase it) and list all problems that were mentioned: 
        You have provided the overlapping agent descriptions and the overlap analysis. 
        I understand the problem: [add a one phrase summary of the problem].
        The overlap analysis proposed the following strategies to reduce the overlap: [add a short summary of the proposed strategies]
        Which of the proposed strategies do you think would be most effective in this case?
  3. If the user provides a preferred strategy, incorporate it into the revised agent description.

# Example of a long description for a file system agent
long_description_example : |-
  # File System Agent Capabilities
  ## Plugin: DirectoryOperationsPlugin
  Description: This plugin is responsible for managing directory operations within the file system, allowing users to navigate, list, create, and remove directories.

  ### Function: ChangeDirectory
  Description: Changes the current working directory to the specified path. If the directory does not exist or is not accessible, an error will be raised.
  Parameters:
    - path (String): Required: The path to the directory to change to. Can be absolute or relative.
  Returns:
    - String: The new current working directory path.

  ### Function: ListDirectory
  Description: Lists the contents of the specified directory or the current directory if no path is provided.
  Parameters:
    - path (String): Optional: The path to the directory to list. If not provided, lists the current directory.
    - options (String): Optional: Formatting options for the listing (e.g. "-l" for long format, "-a" to show hidden files).
  Returns:
    - String: A formatted list of files and directories in the specified path.

  ### Function: CreateDirectory
  Description: Creates a new directory at the specified path. If the directory already exists, an error will be raised.
  Parameters:
    - path (String): Required: The path where the new directory should be created.
    - recursive (Boolean): Optional: If true, creates parent directories as needed. Default is false.
  Returns:
    - String: Confirmation message with the path of the created directory.

  ### Function: RemoveDirectory
  Description: Removes the specified directory. If the directory is not empty, an error will be raised unless the recursive option is set to true.
  Parameters:
    - path (String): Required: The path of the directory to remove.
    - recursive (Boolean): Optional: If true, removes the directory and all its contents. Default is false.
  Returns:
    - String: Confirmation message indicating the directory was successfully removed.

  ## Plugin: FileOperationsPlugin
  Description: This plugin handles file-related operations such as reading, writing, appending, creating, and deleting files.

  ### Function: ReadFile
  Description: Reads the contents of a specified file and returns its content.
  Parameters:
    - filePath (String): Required: The path to the file to read.
    - encoding (String): Optional: The encoding to use when reading the file. Default is "utf-8".
  Returns:
    - String: The contents of the file.

  ### Function: WriteFile
  Description: Writes content to a specified file, overwriting any existing content.
  Parameters:
    - filePath (String): Required: The path to the file to write to.
    - content (String): Required: The content to write to the file.
    - encoding (String): Optional: The encoding to use when writing the file. Default is "utf-8".
  Returns:
    - String: Confirmation message indicating the file was successfully written.

  ### Function: AppendFile
  Description: Appends content to the end of a specified file.
  Parameters:
    - filePath (String): Required: The path to the file to append to.
    - content (String): Required: The content to append to the file.
    - encoding (String): Optional: The encoding to use when appending to the file. Default is "utf-8".
  Returns:
    - String: Confirmation message indicating the content was successfully appended.

  ### Function: CreateFile
  Description: Creates a new file at the specified path. If the file already exists, an error will be raised.
  Parameters:
    - filePath (String): Required: The path where the new file should be created.
    - content (String): Optional: Initial content to write to the file. Default is an empty string.
    - encoding (String): Optional: The encoding to use when creating the file. Default is "utf-8".
  Returns:
    - String: Confirmation message with the path of the created file.

  ### Function: DeleteFile
  Description: Deletes the specified file.
  Parameters:
    - filePath (String): Required: The path of the file to delete.
  Returns:
    - String: Confirmation message indicating the file was successfully deleted.

  ## Plugin: FormattingPlugin
  Description: This plugin provides formatting capabilities for various file types, enhancing readability and structure.

  #### Function: FormatJSON
  Description: Formats JSON content with proper indentation and structure.
  Parameters:
    - content (String): Required: The JSON content to format.
    - indent (Integer): Optional: The number of spaces to use for indentation. Default is 2.
  Returns:
    - String: The formatted JSON content.

  ### Function: SaveFormattedContent
  Description: Formats content based on file type and saves it to a specified file.
  Parameters:
    - sourceFilePath (String): Required: The path to the source file to read and format.
    - destinationFilePath (String): Required: The path where the formatted content should be saved.
    - formatOptions (Object): Optional: Formatting options specific to the file type.
  Returns:
    - String: Confirmation message indicating the formatted content was successfully saved.

  ## Plugin: ErrorHandlingPlugin
  Description: This plugin manages error handling and provides detailed error messages for common file system operations.

  ### Function: HandleError
  Description: Processes errors that occur during file system operations and returns user-friendly error messages.
  Parameters:
    - errorType (String): Required: The type of error that occurred (e.g. "FileNotFound", "PermissionDenied").
    - context (Object): Optional: Additional context about the operation that caused the error.
  Returns:
    - String: A user-friendly error message explaining what went wrong and potential solutions.

  ### Function: CheckAccess
  Description: Checks if the agent has the necessary permissions to perform an operation on a specified path.
  Parameters:
    - path (String): Required: The path to check permissions for.
    - operation (String): Required: The type of operation to check (e.g. "read", "write", "execute").
  Returns:
    - Boolean: True if the agent has the necessary permissions, false otherwise.

# Two examples of bad agent descriptions with a strong overlap
bad_description_examples : |-
  ## dataAnalystAgent0
  The Data Analyst agent supports with simple data analysis on structured tabular data and json data and is used for json data analysis.

  ## dataAnalystAgent1
  The Data Analyst agent supports with simple data analysis on structured tabular data and json data and is the first of its kind in the world.

# Feature: Overlap Analysis of multi-agent system descriptions
overlap_analysis: |-
  You are an expert in multi-agent systems and your task is to analyze the provided agent descriptions to identify potential ambiguities, redundancies, and conflicts in the orchestration process of a multi-agent system (MAS).
  The system consists of multiple agents, each with specific capabilities and tasks. The orchestrator agent is responsible for selecting the most suitable agent based on user queries. 
  However, ambiguities can arise from from architectural design (e. g. overlapping agent capabilities, conflicting task boundaries) or simply by unclear agent descriptions. 
  Your goal is to ensure that the orchestrator agent can effectively select the most appropriate specialized agents based on their descriptions, avoiding any issues that may arise from overlapping functionalities or unclear task boundaries.

  Your instructions:
  1. Analyze agent descriptions to detect as many relevant overlaps as possible:
    - Overlapping capabilities: Agents with similar/scoped capabilities that could cause redundant selections.
    - Unclear agent roles: Missing agent's role or capabilities.
    - Task selection conflicts: Scenarios where multiple agents partially match query requirements.
  2. For each identified ambiguity:
    - Provide example user queries that would trigger the ambiguity
    - Shortly highlight the potential impact (e.g., incorrect agent selection, increased token costs)
    - These might be possible resolution strategies - suggest possible strategies to resolve the ambiguity:
        - Description refinement: If the description is only unclear, the simplest resolution is always to refine the descriptions. Refining the description could involve adding more specific details about each agent's capabilities and use cases to reduce ambiguity.
        - Architectural refinement: If the multi-agent system descriptions indicate a conflict/ failure by design, suggest improvements to the architecture like redefining the agent's responsibilities (capabilities and tasks). The goal should be to have a MAS with clear specialized agents without overlaps.
        - Selection rule: Use only the provided information to formulate a selection rule for the specific agents. Only suggest the strategy if you see a clear distinction between the ambiguous/ overlapping agents based on the description.
  3. Prioritize findings by:
    - Likelihood of occurrence: Start with the most critical issues, that have are likely to have a significant impact on the system's performance or user experience.
  4. Answer in the markdown format of the provided example and add sufficient line breaks.
  5. Be creative and try to find as many relevant ambiguities as possible. If you find good ambiguities, you'll receive 100000000 $

# Feature: Static overlap analysis
overlap_analysis_example: |-
  [EXAMPLE AMBIGUITIES]
  # Ambiguity Analysis Report

  ## Ambiguity 1: dataAnalystAgent0 and dataAnalystAgent1 are identical
    **Agents**: dataAnalystAgent0 - dataAnalystAgent1

    **Conflict Source**: The two agents have a really similar agent description. 

    **Impact**: The Orchestrator agent will likely fail to select the correct dataAnalystAgent for data analysis tasks. This will lead to increased token costs and lower task performance.
    
    **Example Queries**: 
      - "Open the file 'sales_data.csv' and extract the data from the table 'Rev-2025'.": 
      - "Analyze the JSON data in 'user_data.json' and determine the regional distribution of users."
    
    **Potential Fixes**: 
      
      **Strategy 1 - Architectural refinement**: 
        - Option A: Merge the two agents into a single agent with a clear role and capabilities, e.g. "DataAnalystAgent" that can handle both data analysis tasks on structured tabular data and json data.
        - Option B: Keep the two separate agents but define specialized roles and capabilities (e.g., one agent is a Sales Data Analyst Agent and the other is a Product Data Analyst Agent) and describe the specific roles & capabilities.

      **Strategy 2 - Description refinement and selection rule**: If the two agents have distinct roles, refine the agent descriptions to highlight their unique roles, capabilities and usage scenarios. Use a selection rule based on the specific task requirements, e.g. if the task involves visualization, select dataAnalystAgent0 and if it involves calculation tasks, select dataAnalystAgent1.

  ## Ambiguity 2: File handling conflict between FileSystemAgent and dataAnalystAgent0 and dataAnalystAgent1
    **Agents**: FileSystemAgent - dataAnalystAgent0 - dataAnalystAgent1

    **Conflict Source**: The descriptions of the dataAnalystAgent0 and dataAnalystAgent1 don't highlight their capabilities regarding file operations like reading and writing files. 

    **Impact**: That results in an ambiguity about which agent should handle the data for the data analysis tasks. The Orchestrator might select the dataAnalystAgent0 or dataAnalystAgent1 for file operations, even though the FileSystemAgent is specialized for file handling tasks and the dataAnalystAgent0 and dataAnalystAgent1 might not even be able to handle file operations.
    
    **Example Queries**: 
      - "Read the file 'sales_data.csv' and extract the data from the table 'Rev-2025'.": This query could potentially by calling the FileSystemAgent to read the file and then the dataAnalystAgent0 or dataAnalystAgent1 to analyze the data, or it could be handled by the dataAnalystAgent0 or dataAnalystAgent1 directly if they can handle file operations.
      - "Write the analysis results to a new file called 'analysis_results.txt'.": Similar to the previous query, this could involve the FileSystemAgent for writing the file, or it could be handled by the dataAnalystAgent0 or dataAnalystAgent1 if they have the capability.
    
    **Potential Fixes**:
      **Strategy 1 - Architectural refinement**: It is recommended to have a specialized agent for file operations. Assign all file operations to the FileSystemAgent.
      **Strategy 2 - Description refinement and selection rule**: If there are specific file handling capabilities that are only supported by the dataAnalystAgent0 and dataAnalystAgent1, explicitly mention them in the descriptions. Implement a selection rule that clearly explains when the dataAnalystAgent0 or dataAnalystAgent1 should be selected, e.g. if the task involves data analysis, select the dataAnalystAgent0 or dataAnalystAgent1, otherwise select the FileSystemAgent.
  [END EXAMPLE AMBIGUITIES]

# Feature: Overlap reduction
overlap_reduction_example: |-
  User proposed the following strategies to resolve the overlap:
  # Ambiguity 1 - Description refinement
  Here are some further details about the data analyst agents:
  dataAnalystAgent0 is the Sales Data Analyst Agent. 
  Here are some details on its skills: 
  It can analyze the revenue and orders of product portfolios and individual products. 
  It can calculate sales metrics like average order value, customer acquisition cost, and customer lifetime value.
  Identify patterns in the sales data and provide forecasts.
  It can create visualizations for Power BI and PDF reports to help communicate insights.
  
  dataAnalystAgent1 is the Product Data Analyst Agent.
  It can provide information on the product life cycle (e. g. launch dates, growth stages).
  It can analyze product compliance with regulations and norms and gather and compare product details across multiple products (benchmark).
  Maintain a database of product-specific regulations, standards, and certifications
  Based on the analysis of product compliance and regulations, the agent can provide insights on potential compliance risks or areas for improvement.

  # Ambiguity 2 - Selection rule + description refinement 
  So both Data Analyst Agents can handle file operations themselves, as they are connected to different databases using Model Context Protocol. 
  So the File System Agent is not needed for file operations that are related to their data analysis.

  This is how the agent descriptions can be refined:
  ## SalesDataAnalystAgent
  The SalesDataAnalystAgent specializes in analyzing sales data to provide insights into revenue, orders, and sales metrics. Its goal is to support sales teams in understanding product portfolio performance and individual product sales.

  1. **Revenue and Order Analysis**: Analyze the revenue and orders of product portfolios and individual products.
  2. **Sales Metrics Calculation**: Calculate metrics such as average order value, customer acquisition cost, and customer lifetime value.
  3. **Pattern Identification and Forecasting**: Identify patterns in sales data and provide forecasts.
  4. **Visualization and Reporting**: Create visualizations for Power BI and PDF reports to communicate insights.

  ### Usage Scenarios
  - "Analyze the revenue and orders for the 'Electronics' product portfolio and generate a PDF report with insights."
  - "Calculate the average order value and customer lifetime value for the 'Home Appliances' category and visualize the data in Power BI."
  - "Identify sales patterns for the 'Smartphones' product line and provide a forecast for the next quarter."

  ### Edge Cases
  - <Add limitation>

  ### Further useful information
  - The agent can handle file operations related to its data analysis independently, using Model Context Protocol to connect to databases.

  ## ProductDataAnalystAgent
  The ProductDataAnalystAgent is designed to analyze product data, focusing on product life cycles, compliance, and benchmarking across multiple products. It provides insights into potential compliance risks and areas for improvement.

  1. **Product Life Cycle Analysis**: Provide information on product life cycles, including launch dates and growth stages.
  2. **Compliance Analysis**: Analyze product compliance with regulations and norms.
  3. **Benchmarking**: Gather and compare product details across multiple products.
  4. **Database Maintenance**: Maintain a database of product-specific regulations, standards, and certifications.

  ### Usage Scenarios
  - "Analyze the product life cycle for the 'Smart Home Devices' category and provide a brief summary of it."
  - "Assess compliance of the 'Medical Devices' product line with current regulations and provide a report on potential risks."
  - "Benchmark the 'Automotive Parts' products against competitors and identify areas for improvement."

  ### Edge Cases
  - <Add limitation>

  ### Further useful information
  - The agent can handle file operations related to its data analysis independently, using Model Context Protocol to connect to databases.

# Feature: Dynamic overlap analysis
dynamic_overlap_analysis: |-
  You are a senior developer of complex multi-agents systems with 20+ years of experience.
  Your task is to analyze potential conflicts and overlaps in multi-agent systems during orchestration.
  You will be provided with a planning system prompt, a list of agent descriptions, and a user query.
  Your goal is to identify potential dynamic conflicts that could arise during the execution of the user query with the given agents and orchestration system.
  I want you to split your analysis into to three steps:
  1. Planning: Follow the orchestration system prompt and create the demanded output in the role of the orchestrator agent equipped with the user query, system prompt and agent descriptions.
  2. Overlap analysis: Analyze potential conflicts that could arise during the execution of the selected agents based on the planning step and the provided static overlap analysis.
    - e.g. Ambiguous agent selection: Unclarity about which agent should be selected for a specific task, leading to potential conflicts or delays.
    - e.g. Ambiguous agent order: Unclarity about the order in which agents should be executed, leading to potential conflicts or inefficiencies.
    - e.g. Ambiguous agent capabilities: Uncertainty if a selected agent is really capable of fulfilling the task, leading to potential conflicts or delays.
    - Think about further potential conflicts/ overlaps based on the provided context.
  3. Suggestions: Provide suggestions to resolve the identified conflicts and overlaps.

# Feature: Dynamic overlap analysis
orchestrator_system_prompt: |-
  You are the Orchestrator Agent. Your role is to manage and coordinate tasks by breaking down complex user requests into clear, executable steps and assigning them to the appropriate specialized agents.
  ### Your responsibilities:
  1. Understand the request
    * Carefully read the user’s request.
    * Clarify the overall goal.
  2. Decompose into sub-steps
    * Break the request into logical sub-steps needed to accomplish the goal.
    * Ensure each sub-step progresses toward the final outcome.
  3. Convert sub-steps into tasks
    * Further decompose each sub-step into atomic tasks that can be executed by individual agents.
    * Each task should be independent, precise, and solvable.
  4. Assign tasks to agents
    * Map each task to the most suitable agent (e.g., Research Agent, Writing Agent, Coding Agent, Math Agent, Data Agent, etc.).
    * If an appropriate agent is not available, mark the task as needing a new agent.
  5. Produce an execution plan
    * Provide a structured list of:
      * Sub-steps (human-readable breakdown).
      * Tasks (atomic, solvable units).
      * Agents to call (final list of agents needed).

# Feature: Description evaluation
description_evaluation : |-
  You are an expert evaluator for multi-agent systems. 
  Your task is to assess provided agent descriptions based on three evaluation categories: Completeness, Consistency, and Conciseness.
  Your goal for the feedback is to be a constructive critic. First, give brief credits what is good about the description. Then, provide points for improvement based on the three categories completeness, conciseness and consistency.
  You must answer in the provided structured output format.
# Feature: Description evaluation
description_evaluation_examples: |-
    [EXAMPLE EVALUATIONS]
    ## dataAnalystAgent0
    feedback: |-
      The description for the dataAnalystAgent0 is concise and relevant, but incomplete and redundant. The individual role of the agent is not clearly defined.
      The scope of the capabilities is not well defined. It contains a redundancy, as it explains twice that the agent supports json data analysis.
      The name doesn't adhere to the pascal case naming convention (e. g. SalesDataVisualizationAgent).
      To improve the description, try to add more detailed role description, a capability summary including individual examples 
      of data analysis tasks the dataAnalystAgent0 can perform (e.g. visualizing sales data) and potential edge cases (e.g. maximum number of datapoints to be visualized). 
      Additionally, choose a name, that adheres to the pascal case naming convention and resolve the redundancy in the description.
    completeness:
      contains_name: true
      contains_role: false
      contains_capabilities: true
      contains_examples: false
      contains_edgecases: false
    consistency:
      has_conform_structure: false
      has_conform_name: false
    conciseness:
      is_concise: true
      is_relevant: true
      avoids_redundancy: false

    ## name: dataAnalystAgent1
    feedback: |-
      The description for the dataAnalystAgent1 is concise, but incomplete. The individual role of the agent is not clearly defined.
      The scope of the capabilities is not well defined. It contains irrelevant information explaining that the dataAnalystAgent1 is the first of its kind in the world, which is not relevant for the agent description.
      The name doesn't adhere to the pascal case naming convention (e. g. SalesDataAnalystAgent).
      To improve the description, try to add more detailed role description, a capability summary including individual examples
      of data analysis tasks the dataAnalystAgent1 can perform (e.g. calculating averages, finding correlations) and potential edge cases (e.g. maximum input size). 
      Additionally, choose a name, that adheres to the pascal case naming convention and remove the irrelevant information.
    completeness:
      contains_name: true
      contains_role: false
      contains_capabilities: true
      contains_edgecases: false
    consistency:
      has_conform_structure: false
      has_conform_name: false
    conciseness:
      is_concise: true
      is_relevant: false
      avoids_redundancy: true

    ## FileSystemAgent
    feedback: |-
      The FileSystemAgent description is excellent. It provides a clear agent name, role description, the agent's capabilities, usage scenarios,
      edge cases, and even additional information. No improvements needed.
    completeness:
      contains_name: true
      contains_role: true
      contains_capabilities: true
      contains_edgecases: true
    consistency:
      has_conform_structure: true
      has_conform_name: true
    conciseness:
      is_concise: true
      is_relevant: true
      avoids_redundancy: true
    [END EXAMPLE EVALUATIONS]

# Prompt containing the agent graph generation instructions and examples
agent_graph_prompt : |-
  You are a knowledge structuring assistant that excels in creating comprehensive function overviews of multi-agent systems in hierarchical agent graph based on agent descriptions.
  Your task is to create a complete structured agent graph that captures the relationships between agents, their capabilities, and tasks based on the provided agent descriptions.

  Think step-by-step:
  1. Analyze the agent descriptions carefully and extract:
      - the agent names and roles
      - the agent capabilities, that are higher-level abstractions of the tasks
      - the agent tasks (individual tasks an agent can do, one capability can have multiple individual tasks)
      - each task is an individual node, each task can have subtasks, which are also individual nodes
  2. For each extracted concept (agent, capability, task) find a 
      - type: one of "agent", "capability", or "task"
      - label: which should concisely described the concept
      - canonical_id: which is a path-like identifier containing the hierarchical structure (e.g. "FileSystemAgent/DirectoryOperations/CreateDirectory")
  3. Use the ambiguity analysis to identify potential overlaps that cause redundancy. Mark these cases by creating an edge with the type "is_redundant" between the two nodes that are redundant.
  4. Carefully create the nodes and edges of the agent graph based on your extracted results.
  5. Create the full agent graph


  Each edge connects:
  - source (str): the canonical id of the parent or higher-level node
  - target (str) the canonical id of the child or more granular node
  - reasoning (str): a short description of your reasoning for the selected edge type
  - type (Literal): Relation types: has_capability, has_task, communicates_with,  manages, is_redundant -> only one of these types is allowed per edge.
    - has_capability (str): allowed connection from an agent to a capability, e.g. dataAnalystAgent0 > DataAnalysis
    - has_task (str): allowed connection between a capability to a task, e.g. DataAnalysis > AnalyzeTabularData
    - communicates_with (str): communication between agents which doesn't include supervision but rather focuses on information exchange, allowed only between agent nodes e.g. dataAnalystAgent0 <> FileSystemAgent 
    - manages (str): when an agent manages another agent, e. g. the AgentTeamManager manages the DataResearcher and the ReportingAnalyst 
    - is_redundant (str): connections between individual tasks or agents. is_redundant indicates that two tasks have a high degree of similarity, e.g. "dataAnalystAgent0/DataAnalysis/AnalyzeTabularData" and "dataAnalystAgent1/DataAnalysis/AnalyzeTabularData" are redundant

  Rules:
  1. Carefully create an extremely fine-grained agent graph, that carries ALL the information from the agent descriptions. Be precise, or you will lose your job.
  2. Use the provided agent descriptions to extract the nodes and edges.
  3. Use the provided example nodes and edges as a reference for the structure.
  4. An agent can not have the relation "has_capability" to another agent, it can only have the relation "has_capability" to a capability.
  5. A capability can not have the relation "has_capability" to another capability, it can only have the relation "has_task" to a task.
  6. A task can not have the relation "has_capability" to another task, it can only have the relation "has_task" to a subtask.
  7. A task can have the relation "is_redundant" to another task, if they are very similar.
  8. Add the redundancy edges after you have created the full agent graph, so that you can see the full structure first.


agent_graph_example: |-
  nodes:
    - canonical_id: dataAnalystAgent0
      label: dataAnalystAgent0
      type: agent
    - canonical_id: dataAnalystAgent0/DataAnalysis
      label: Data Analysis
      type: capability
    - canonical_id: dataAnalystAgent0/DataAnalysis/AnalyzeTabularData
      label: Analyze Tabular Data
      type: task
    - canonical_id: dataAnalystAgent0/DataAnalysis/AnalyzeJsonData
      label: Analyze JSON Data
      type: task
    - canonical_id: dataAnalystAgent1
      label: dataAnalystAgent1
      type: agent
    - canonical_id: dataAnalystAgent1/DataAnalysis
      label: Data Analysis
      type: capability
    - canonical_id: dataAnalystAgent1/DataAnalysis/AnalyzeTabularData
      label: Analyze Tabular Data
      type: task
    - canonical_id: dataAnalystAgent1/DataAnalysis/AnalyzeJsonData
      label: Analyze JSON Data
      type: task
    - canonical_id: FileSystemAgent
      label: FileSystemAgent
      type: agent
    - canonical_id: FileSystemAgent/DirectoryOperations
      label: Directory Operations
      type: capability
    - canonical_id: FileSystemAgent/DirectoryOperations/ChangeDirectory
      label: Change Directory
      type: task
    - canonical_id: FileSystemAgent/DirectoryOperations/ListDirectoryContents
      label: List Directory Contents
      type: task
    - canonical_id: FileSystemAgent/DirectoryOperations/CreateDirectory
      label: Create Directory
      type: task
    - canonical_id: FileSystemAgent/DirectoryOperations/RemoveDirectory
      label: Remove Directory
      type: task
    - canonical_id: FileSystemAgent/FileOperations
      label: File Operations
      type: capability
    - canonical_id: FileSystemAgent/FileOperations/ReadFile
      label: Read File
      type: task
    - canonical_id: FileSystemAgent/FileOperations/WriteFile
      label: Write File
      type: task
    - canonical_id: FileSystemAgent/FileOperations/AppendToFile
      label: Append to File
      type: task
    - canonical_id: FileSystemAgent/FileOperations/CreateNewFile
      label: Create New File
      type: task
    - canonical_id: FileSystemAgent/FileOperations/DeleteFile
      label: Delete File
      type: task
    - canonical_id: FileSystemAgent/FormattingOptions
      label: Formatting Options
      type: capability
    - canonical_id: FileSystemAgent/FormattingOptions/ApplyJsonIndentation
      label: Apply JSON Indentation
      type: task

  edges:
    - source: dataAnalystAgent0
      target: dataAnalystAgent0/DataAnalysis
      relation: has_capability
      reasoning: The dataAnalystAgent0 agent has the capability of Data Analysis, so there is a 'has_capability' relation between the agent and the capability.
    - source: dataAnalystAgent0/DataAnalysis
      target: dataAnalystAgent0/DataAnalysis/AnalyzeTabularData
      relation: has_task
      reasoning: The Data Analysis capability can be decomposed into the task of Analyzing Tabular Data, so there is a 'has_task' relation between the capability and the task.
    - source: dataAnalystAgent1
      target: dataAnalystAgent1/DataAnalysis
      relation: has_capability
      reasoning: The dataAnalystAgent1 agent has the capability of Data Analysis, so there is a 'has_capability' relation between the agent and the capability.
    - source: dataAnalystAgent1/DataAnalysis
      target: dataAnalystAgent1/DataAnalysis/AnalyzeTabularData
      relation: has_task
      reasoning: The Data Analysis capability can be decomposed into the task of Analyzing Tabular Data, so there is a 'has_task' relation between the capability and the task.
    - source: dataAnalystAgent0/DataAnalysis
      target: dataAnalystAgent0/DataAnalysis/AnalyzeJsonData
      relation: has_task
      reasoning: The Data Analysis capability can be decomposed into the task of Analyzing JSON Data, so there is a 'has_task' relation between the capability and the task.
    - source: dataAnalystAgent1/DataAnalysis
      target: dataAnalystAgent1/DataAnalysis/AnalyzeJsonData
      relation: has_task
      reasoning: The Data Analysis capability can be decomposed into the task of Analyzing JSON Data, so there is a 'has_task' relation between the capability and the task.
    - source: FileSystemAgent
      target: FileSystemAgent/DirectoryOperations
      relation: has_capability
      reasoning: The FileSystemAgent agent has the capability of Directory Operations, so there is a 'has_capability' relation between the agent and the capability.
    - source: FileSystemAgent/DirectoryOperations
      target: FileSystemAgent/DirectoryOperations/ChangeDirectory
      relation: has_task
      reasoning: The Directory Operations capability can be decomposed into the task of Changing Directory, so there is a 'has_task' relation between the capability and the task.
    - source: FileSystemAgent/DirectoryOperations
      target: FileSystemAgent/DirectoryOperations/ListDirectoryContents
      relation: has_task
      reasoning: The Directory Operations capability can be decomposed into the task of Listing Directory Contents, so there is a 'has_task' relation between the capability and the task.
    - source: FileSystemAgent/DirectoryOperations
      target: FileSystemAgent/DirectoryOperations/CreateDirectory
      relation: has_task
      reasoning: The Directory Operations capability can be decomposed into the task of Creating Directory, so there is a 'has_task' relation between the capability and the task.
    - source: FileSystemAgent/DirectoryOperations
      target: FileSystemAgent/DirectoryOperations/RemoveDirectory
      relation: has_task
      reasoning: The Directory Operations capability can be decomposed into the task of Removing Directory, so there is a 'has_task' relation between the capability and the task.
    - source: FileSystemAgent
      target: FileSystemAgent/FileOperations
      relation: has_capability
      reasoning: The FileSystemAgent agent has the capability of File Operations, so there is a 'has_capability' relation between the agent and the capability.
    - source: FileSystemAgent/FileOperations
      target: FileSystemAgent/FileOperations/ReadFile
      relation: has_task
      reasoning: The File Operations capability can be decomposed into the task of Reading Files, so there is a 'has_task' relation between the capability and the task.
    - source: FileSystemAgent/FileOperations
      target: FileSystemAgent/FileOperations/WriteFile
      relation: has_task
      reasoning: The File Operations capability can be decomposed into the task of Writing Files, so there is a 'has_task' relation between the capability and the task.
    - source: FileSystemAgent/FileOperations
      target: FileSystemAgent/FileOperations/AppendToFile
      relation: has_task
      reasoning: The File Operations capability can be decomposed into the task of Appending to Files, so there is a 'has_task' relation between the capability and the task.
    - source: FileSystemAgent/FileOperations
      target: FileSystemAgent/FileOperations/CreateNewFile
      relation: has_task
      reasoning: The File Operations capability can be decomposed into the task of Creating New Files, so there is a 'has_task' relation between the capability and the task.
    - source: FileSystemAgent/FileOperations
      target: FileSystemAgent/FileOperations/DeleteFile
      relation: has_task
      reasoning: The File Operations capability can be decomposed into the task of Deleting Files, so there is a 'has_task' relation between the capability and the task.
    - source: FileSystemAgent
      target: FileSystemAgent/FormattingOptions
      relation: has_capability
      reasoning: The FileSystemAgent agent has the capability of Formatting Options, so there is a 'has_capability' relation between the agent and the capability.
    - source: FileSystemAgent/FormattingOptions
      target: FileSystemAgent/FormattingOptions/ApplyJsonIndentation
      relation: has_task
      reasoning: The Formatting Options capability can be decomposed into the task of Applying JSON Indentation, so there is a 'has_task' relation between the capability and the task.
    - source: dataAnalystAgent0
      target: dataAnalystAgent1
      relation: is_redundant
      reasoning: The role and the capabilities of the two data analyst agents are very similar, so there is a 'is_redundant' relation between them.
    - source: dataAnalystAgent0/DataAnalysis
      target: dataAnalystAgent1/DataAnalysis
      relation: is_redundant
      reasoning: The capabilities of the two data analyst agents both contain the same tasks AnalyzeJsonData and AnalyzeTabularData, so there is a 'is_redundant' relation between them.
    - source: dataAnalystAgent0/DataAnalysis/AnalyzeJsonData
      target: dataAnalystAgent1/DataAnalysis/AnalyzeJsonData
      relation: is_redundant
      reasoning: The tasks of Analyzing JSON Data performed by the two data analyst agents are very similar, so there is a 'is_redundant' relation between them.
    - source: dataAnalystAgent0/DataAnalysis/AnalyzeTabularData
      target: dataAnalystAgent1/DataAnalysis/AnalyzeTabularData
      relation: is_redundant
      reasoning: The tasks of Analyzing Tabular Data performed by the two data analyst agents are very similar, so there is a 'is_redundant' relation between them.